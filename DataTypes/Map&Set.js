/**
 * Map ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –ø–∞—Ä: –∫–ª—é—á ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Object),
 * –≤ Map –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞: —Å—Ç—Ä–æ–∫–∏, —á–∏—Å–ª–∞, –æ–±—ä–µ–∫—Ç—ã –∏ –¥–∞–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏.
 */

// let map = new Map();
//
// map.set('1', '—Å—Ç—Ä–æ–∫–∞');    // –∫–ª—é—á ‚Äî —Å—Ç—Ä–æ–∫–∞
// map.set(1, '—á–∏—Å–ª–æ');       // –∫–ª—é—á ‚Äî —á–∏—Å–ª–æ
// map.set(true, '–±—É–ª–µ–≤–æ');   // –∫–ª—é—á ‚Äî –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//
// console.log(map.get(1));       // '—á–∏—Å–ª–æ'
// console.log(map.get('1'));     // '—Å—Ç—Ä–æ–∫–∞'
// console.log(map.size);         // 3

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã Map:
/**
 * map.set(key, value) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É –∫–ª—é—á‚Äì–∑–Ω–∞—á–µ–Ω–∏–µ.
 *
 * map.get(key) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É.
 *
 * map.has(key) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞.
 *
 * map.delete(key) ‚Äî —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–ª—é—á—É.
 *
 * map.clear() ‚Äî –æ—á–∏—â–∞–µ—Ç –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.
 *
 * map.size ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π:
// let user = { name: "–í–∞—Å—è" };
// let visitsCountMap = new Map();
//
// visitsCountMap.set(user, 123);
// console.log(visitsCountMap.get(user)); // 123

// ‚úÖ Set ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

/**
 * Set ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
 * –¢–æ –µ—Å—Ç—å, –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Set –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞.
 */

// let set = new Set();
//
// set.add(1);
// set.add(2);
// set.add(2); // –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ 2 —É–∂–µ –µ—Å—Ç—å –≤ Set
//
// console.log(set.size); // 2
//
// console.log(set.has(1)); // true
// set.delete(1);
// console.log(set.has(1)); // false

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã Set:
/**
 * set.add(value) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
 *
 * set.has(value) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.
 *
 * set.delete(value) ‚Äî —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
 *
 * set.clear() ‚Äî –æ—á–∏—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é.
 *
 * set.size ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */

// –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Map –∏ Set?
/**
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Map, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—ã –∫–ª—é—á‚Äì–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞–º–∏.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Set, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ.
 */

// üîÅ Object.entries(obj)

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –ø–∞—Ä [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ].
 */

// let obj = {
//     name: "–ê–Ω–Ω–∞",
//     age: 25
// };
//
// let entries = Object.entries(obj);
// console.log(entries);
// [["name", "–ê–Ω–Ω–∞"], ["age", 25]]

// –≠—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ä –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—Ç—å –≤ Map:
// let map = new Map(Object.entries(obj));
// console.log(map)
// console.log(map.get("name")); // "–ê–Ω–Ω–∞"

// üîÑ Object.fromEntries(pairs)

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ä [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ] –≤ –æ–±—ä–µ–∫—Ç.
 *
 * –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å Map –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç.
 */

// let map = new Map([
//     ["fruit", "apple"],
//     ["color", "red"]
// ]);
//
// let obj = Object.fromEntries(map);
// console.log(obj);
// { fruit: "apple", color: "red" }


//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞

/**
 * –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é unique(arr), –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–∞ arr.
 */

// const values = [ "Hare", "Krishna", "Hare", "Krishna", "Krishna", "Krishna", "Hare", "Hare", ":-O" ];
//
// const unique = arr => {
//     return Array.from(new Set(arr));
// };
// console.log(unique(values)); // [ Hare, Krishna, :-O ]
//====================================================================================================================//
// –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –∞–Ω–∞–≥—Ä–∞–º–º—ã

// const arr = ["nap", "teachers", "cheaters", "PAN", "ear", "era", "hectares"];
//
// const anagramClean = arr => {
//     const map = new Map();
//
//     for (const word of arr) {
//         const sorted = word.toLowerCase().split("").sort().join("");
//         map.set(sorted, word);
//     }
//
//     return Array.from(map.values());
// };
// console.log(anagramClean(arr)); // "nap, teachers, ear" –∏–ª–∏ "PAN, cheaters, era"

/**
 * Nor solved
 */
//====================================================================================================================//
// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –∫–ª—é—á–∏

/**
 * let map = new Map();
 *
 * map.set("name", "John");
 *
 * let keys = map.keys();
 *
 * // Error: keys.push is not a function
 * // –û—à–∏–±–∫–∞: keys.push -- —ç—Ç–æ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è
 * keys.push("more");
 */

// const map = new Map();
// map.set("name", "John");
//
// const keys = Array.from(map.keys());
// keys.push("more");
//
// console.log(keys); // [ name, more ]

