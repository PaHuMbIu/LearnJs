/**
 * ‚úÖ –í JavaScript –æ–¥–∏–Ω —Ç–∏–ø —á–∏—Å–µ–ª: number
 * –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è —Ü–µ–ª—ã—Ö, –∏ –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
 */

// let integer = 10;
// let float = 3.14;

/**
 * ‚ö†Ô∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª:
 * - NaN ‚Äî "Not a Number", –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏
 * - Infinity –∏ -Infinity ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
 * - –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥—Ä–æ–±—è–º–∏
 */

// console.log("abc" / 2);       // NaN
// console.log(1 / 0);           // Infinity
// console.log(0.1 + 0.2);       // 0.30000000000000004 ‚ùå

/**
 * üí° –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π:
 */
// let sum = 0.1 + 0.2;
// console.log(Math.abs(sum - 0.3) < 0.000001); // true ‚úÖ

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π:
 */
// console.log(isNaN("abc" / 2));      // true
// console.log(isFinite("15"));        // true
// console.log(isFinite("abc"));       // false

/**
 * üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞:
 */
// console.log(parseInt("100px"));     // 100
// console.log(parseFloat("12.5em"));  // 12.5

/**
 * üßÆ parseInt —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—á–∏—Å–ª–µ–Ω–∏—è:
 */
// console.log(parseInt("ff", 16));    // 255

/**
 * üßæ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ:
 */
// console.log(Math.floor(3.7));       // 3 ‚Äî –≤–Ω–∏–∑
// console.log(Math.ceil(3.2));        // 4 ‚Äî –≤–≤–µ—Ä—Ö
// console.log(Math.round(3.5));       // 4 ‚Äî –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ
// console.log(Math.trunc(3.9));       // 3 ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å

/**
 * üìå toFixed(n) ‚Äî –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ n –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–¢–†–û–ö–£
 */
// let n = 1.23456;
// console.log(n.toFixed(2));          // "1.23" (—Å—Ç—Ä–æ–∫–∞)
// console.log(+n.toFixed(2));         // 1.23 (—á–∏—Å–ª–æ)

/**
 * ‚úÖ –ì–ª–∞–≤–Ω–æ–µ:
 * - –í JS –≤—Å–µ —á–∏—Å–ª–∞ ‚Äî —Ç–∏–ø number
 * - –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω —Å –¥—Ä–æ–±—è–º–∏ (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
 * - –ò—Å–ø–æ–ª—å–∑—É–π isNaN, isFinite –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
 * - –ò—Å–ø–æ–ª—å–∑—É–π parseInt, parseFloat –¥–ª—è —Å—Ç—Ä–æ–∫
 * - toFixed ‚Äî –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 */

//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –í–≤–æ–¥ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

/**
 * –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é readNumber, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –µ–≥–æ –Ω–µ –≤–≤–µ–¥—ë—Ç.
 *
 * –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 *
 * –¢–∞–∫–∂–µ –Ω–∞–¥–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –Ω–∞–∂–∞–≤ ¬´–û—Ç–º–µ–Ω–∞¬ª.
 * –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å null.
 */

// const readNumber = () => {
//     let num = NaN;
//
//     while (true) {
//         if (!isNaN(num) && typeof num === "number") {
//             return num;
//         } else {
//             num = +prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", 0);
//         }
//     }
// };
// const result = readNumber();
// console.log(`–ß–∏—Å–ª–æ: ${ result || result === 0 ? result : null}`);

// let i = 0;
// while (i != 10) {
//     console.log(i += 0.2);
//     i += 0.2;
// }
//====================================================================================================================//
// –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ max

/**
 * –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Math.random() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –¥–æ 1 (–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—è 1)
 *
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é random(min, max), –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç min
 * –¥–æ max (–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—è max).
 */

// const random = (min, max) => {
//     return Math.floor(min + Math.random() * (max - min));
// };
// console.log(random(1, 5));
// console.log(random(1, 6));
// console.log(random(1, 10));