// üì¶ –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤

/**
 * –ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
 * –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.
 */
// let fruits = ["–Ø–±–ª–æ–∫–æ", "–ë–∞–Ω–∞–Ω", "–ê–ø–µ–ª—å—Å–∏–Ω"];
// console.log(fruits[0]); // "–Ø–±–ª–æ–∫–æ"
//
// // üîπ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
//
// // –ß–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞–ª:
// let arr1 = [1, 2, 3];
//
// // –ß–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
// let arr2 = new Array(3); // –ú–∞—Å—Å–∏–≤ —Å 3 –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
//
// // üîπ –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞
//
// let fruits2 = ["–Ø–±–ª–æ–∫–æ", "–ë–∞–Ω–∞–Ω"];
// console.log(fruits2.length); // 2
//
// fruits2.length = 1;
// console.log(fruits2); // ["–Ø–±–ª–æ–∫–æ"]
//
// // üîπ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞
//
// let numbers = [10, 20, 30];
// console.log(numbers[1]); // 20
//
// // üîπ –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
//
// let items = ["–Ø–±–ª–æ–∫–æ"];
// items.push("–ë–∞–Ω–∞–Ω");    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü
// items.pop();            // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ü–∞
// items.unshift("–ü–µ—Ä—Å–∏–∫"); // –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
// items.shift();          // –£–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–∞—á–∞–ª–∞
//
// // üîÅ –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
//
// let letters = ["a", "b", "c"];
//
// // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
// for (let i = 0; i < letters.length; i++) {
//     console.log(letters[i]);
// }
//
// // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
// for (let item of letters) {
//     console.log(item);
// }
//
// // üß† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–∏–≤–æ–≤
//
// let mixed = [1, "—Å—Ç—Ä–æ–∫–∞", {name: "John"}, [5, 6]];
// console.log(mixed[2].name); // John
// console.log(mixed[3][1]);   // 6
//
// // üî¢ –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
//
// let matrix = [
//     [1, 2],
//     [3, 4]
// ];
//
// console.log(matrix[1][0]); // 3

// ‚úÖ –†–µ–∑—é–º–µ –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤
/**
 * push, pop       ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–∞
 * unshift, shift  ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞
 * forEach, for...of ‚Äî –ø–µ—Ä–µ–±–æ—Ä
 * find, filter, indexOf ‚Äî –ø–æ–∏—Å–∫
 * map, reduce, sort ‚Äî —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
 */

//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –ü–æ–¥–º–∞—Å—Å–∏–≤ –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º—ã

/**
 * –ù–∞ –≤—Ö–æ–¥–µ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: arr = [1, -2, 3, 4, -9, 6].
 *
 * –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–¥–º–∞—Å—Å–∏–≤ –≤ arr, —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞.
 *
 * –§—É–Ω–∫—Ü–∏—è getMaxSubSum(arr) –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç—Ç—É —Å—É–º–º—É.
 *
 * –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –±–µ—Ä—ë–º(–ø–æ–¥–º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π) –∏ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ ¬´0¬ª
 */

// const getMaxSubSum = array => {
//     let maxSum = 0;
//
//     for (let i = 0; i < array.length; i++) {
//         let sumFixedStart = 0;
//
//         for (let j = i; j < array.length; j++) {
//             sumFixedStart += array[j];
//             maxSum = Math.max(maxSum, sumFixedStart);
//         }
//     }
//
//     return maxSum;
// };
//
// console.log(getMaxSubSum([ -1, 2, 3, -9 ])); // 5
// console.log(getMaxSubSum([ 2, -1, 2, 3, -9 ])); // 6
// console.log(getMaxSubSum([ -1, 2, 3, -9, 11 ])); // 11
// console.log(getMaxSubSum([ -2, -1, 1, 2 ])); // 3
// console.log(getMaxSubSum([ 100, -9, 2, -3, 5 ])); // 100
// console.log(getMaxSubSum([ 1, 2, 3 ])); // 6

/**
 * Not solved
 */
