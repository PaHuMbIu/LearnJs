/**
 * ‚úÖ SYMBOL ‚Äî –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.
 *
 * Symbol ‚Äî —ç—Ç–æ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –æ–±—ä–µ–∫—Ç–∞—Ö.
 * –û–Ω –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–±–æ—Ä–µ.
 */

// üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤-----------------------------------------------------------------------------------------------//
const id = Symbol(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
const userId = Symbol("user_id"); // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log(userId);

const a = Symbol("test");
const b = Symbol("test");
console.log(a === b); // false ‚Äî –∫–∞–∂–¥—ã–π Symbol —É–Ω–∏–∫–∞–ª–µ–Ω

// üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –æ–±—ä–µ–∫—Ç–∞--------------------------------------------------------------------------//
const user = {
  name: "–ê–ª–∏—Å–∞"
};

const uid = Symbol("id");
user[uid] = 123;

console.log(user);             // { name: "–ê–ª–∏—Å–∞", [Symbol(id)]: 123 }
console.log(user.uid);         // undefined ‚Äî –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Ç—Ä–æ–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
console.log(user[uid]);        // 123 ‚Äî –¥–æ—Å—Ç—É–ø –ø–æ —Å–∏–º–≤–æ–ª—É —Ä–∞–±–æ—Ç–∞–µ—Ç

// üïµÔ∏è –°–∏–º–≤–æ–ª—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–±–æ—Ä–µ-------------------------------------------------------------------------//
const user2 = {
  name: "–ê–ª–∏—Å–∞",
};
const uid2 = Symbol("id");
user2[uid2] = 123;

for (let key in user2) {
  console.log(key); // –ü–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ "name"
}

console.log(Object.keys(user2)); // ["name"]
console.log(Object.getOwnPropertyNames(user2)); // ["name"]
console.log(Object.getOwnPropertySymbols(user2)); // [ Symbol(id) ]

// üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (Symbol.for / Symbol.keyFor)-----------------------------------------------------------------//
/**
 * –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ Symbol –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä:
 */
const globalId1 = Symbol.for("app.id");
const globalId2 = Symbol.for("app.id");

console.log(globalId1 === globalId2); // true ‚Äî –±–µ—Ä—ë—Ç—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
console.log(Symbol.keyFor(globalId1)); // "app.id" ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

const local = Symbol("app.id"); // –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç for
console.log(Symbol.keyFor(local)); // undefined ‚Äî –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª

// ‚öôÔ∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏--------------------------------------------------------------------//

// 1. Symbol.iterator ‚Äî –¥–µ–ª–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º
const range = {
  from: 1,
  to: 3,
  [Symbol.iterator]() {
    return {
      current: this.from,
      last: this.to,
      next() {
        if (this.current <= this.last) {
          return {done: false, value: this.current++};
        } else {
          return {done: true};
        }
      }
    };
  }
};

for (let num of range) {
  console.log(num); // 1, 2, 3
}

// 2. Symbol.toPrimitive ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–∏–º–∏—Ç–∏–≤
const money = {
  amount: 1500,
  [Symbol.toPrimitive](hint) {
    return hint === "string" ? "\uD83D\uDCB01500\u20BD" : 1500;
  }
};

console.log(`${money}`); // üí∞1500‚ÇΩ
console.log(money + 500); // 2000

// 3. Symbol.toStringTag ‚Äî –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è Object.prototype.toString
const person = {
  [Symbol.toStringTag]: "SuperUser"
};

console.log(Object.prototype.toString.call(person)); // [object SuperUser]

// ‚ùó –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è----------------------------------------------------------------------------------------//
console.log(typeof Symbol()); // "symbol"
console.log(Symbol("test").toString()); // "Symbol(test)"

try {
  console.log("ID: " + Symbol("id")); // ‚ùå TypeError
} catch (e) {
  console.log("–ù–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Symbol –≤ —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é.");
}

// üí° –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ SYMBOL:
// - –ù—É–∂–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞;
// - –•–æ—á–µ—à—å —Å–∫—Ä—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞;
// - –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (Symbol.iterator, Symbol.toPrimitive –∏ –¥—Ä.);
// - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ, —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ (Symbol.for).

/**
 * üß† –ò–¢–û–ì–û:
 *
 * Symbol ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, "–Ω–µ–≤–∏–¥–∏–º—ã—Ö" –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π.
 * –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –∏ API.
 */