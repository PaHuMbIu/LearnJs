/**
 * –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ JavaScript –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥—ã .call() –∏ .apply().
 * –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º this –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
 */

// üîπ call
/**
 * –¢—ã ¬´–≤—ã–∑—ã–≤–∞–µ—à—å¬ª —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ user
 */
function sayHi() {
  console.log(this.name);
}

const user = {name: "–ê–Ω–Ω–∞"};

sayHi.call(user); // 'this' –≤–Ω—É—Ç—Ä–∏ sayHi –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ 'user'
// => –ê–Ω–Ω–∞

// üîπ apply
/**
 * –ü–æ—Ö–æ–∂ –Ω–∞ call, –Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:
 */
function sayHiTo(greeting, ...args) {
  console.log(`${greeting}, ${this.name}`);
}

const user1 = {name: "–ê–Ω–Ω–∞"};

sayHiTo.apply(user1, [1, 2, 43, 4]);
sayHiTo.apply(user1, ["–ü—Ä–∏–≤–µ—Ç"]);
// => –ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞

// ü§î –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É call –∏ apply?
/**
 * –¢–æ–ª—å–∫–æ –≤ —Å–ø–æ—Å–æ–±–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
 */
// func.call(thisArg, arg1, arg2, ...)
// func.apply(thisArg, [arg1, arg2, ...])


// –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–π –Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é.
 */

function say(name) {
  console.log(`–ü—Ä–∏–≤–µ—Ç, ${name}`);
}

// –°–¥–µ–ª–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä logDecorator, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã:

function logDecorator(func) {
  return function (...args) {
    console.log(`–í—ã–∑–æ–≤ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: ${args}`);
    return func.apply(this, args); // –ø–µ—Ä–µ–¥–∞—ë–º 'this' –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  };
}

const wrappedSay = logDecorator(say);

wrappedSay("–ê–Ω–Ω–∞"); // –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
// –í—ã–∑–æ–≤ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: –ê–Ω–Ω–∞
// –ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞

// –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–º–æ–∏–∑–∞—Ü–∏—è)

/**
 * –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å —Ç–µ–º–∏ –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
 */

function slow(x) {
  console.log(`–í—ã—á–∏—Å–ª—è–µ–º –¥–ª—è ${x}...`);
  return x * 2;
}

// –°–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä cachingDecorator:

function cachingDecorator(func) {
  const cache = new Map();

  return function (x) {
    if (cache.has(x)) {
      return cache.get(x);
    }

    const result = func.call(this, x);
    cache.set(x, result);
    return result;
  };
}

const cachedSlow = cachingDecorator(slow);

console.log(cachedSlow(2)); // –í—ã—á–∏—Å–ª—è–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç 4
console.log(cachedSlow(2)); // –ë–µ—Ä—ë—Ç –∏–∑ –∫–µ—à–∞, –≤—ã–≤–æ–¥–∏—Ç 4

/**
 * ‚úÖ –ü–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º func.call(this, ...)?
 * –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å this —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞.
 */

// üîπ –ü—Ä–∏–º–µ—Ä, –≥–¥–µ –≤–∞–∂–Ω–æ this
const worker = {
  someMethod() {
    return 5;
  },

  slow(x) {
    console.log("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å", x);
    return x * this.someMethod();
  }
};

// –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä–Ω—É—Ç—å `worker.slow`:
function cachingDecorator1(func) {
  const cache = new Map();

  return function (x) {
    if (cache.has(x)) {
      return cache.get(x);
    }

    const result = func.call(this, x); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π this
    cache.set(x, result);
    return result;
  };
}

worker.slow = cachingDecorator1(worker.slow);

console.log(worker.slow(2)); // –†–∞–±–æ—Ç–∞–µ—Ç

// üìå –í—ã–≤–æ–¥—ã
/**
 * call –∏ apply –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º this.
 *
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ‚Äî –æ–±—ë—Ä—Ç–∫–∏ –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –¥–æ–±–∞–≤–ª—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
 *
 * –ß–µ—Ä–µ–∑ func.call(this, ...) –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (this) –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤–Ω—É—Ç—Ä–∏ –æ–±—ë—Ä—Ç–∫–∏.
 *
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è:
 *
 * –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è;
 *
 * –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è;
 *
 * –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤;
 *
 * –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ç.–¥.
 */

//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-—à–ø–∏–æ–Ω

/**
 * –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä spy(func), –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ë—Ä—Ç–∫—É,
 * –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–≤–æ—ë–º —Å–≤–æ–π—Å—Ç–≤–µ calls.
 *
 * –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
 */

// function work(a, b) {
//     console.log(a + b); // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –º–µ—Ç–æ–¥
// }
//
// const spy = func => {
//     function wrapper(...args) {
//         func.apply(this, args);
//         wrapper.calls.push(args);
//     }
//     wrapper.calls = [];
//
//     return wrapper;
// };
//
// work = spy(work);
//
// work(1, 2); // 3
// work(4, 5); // 9
//
// for (let args of work.calls) {
//     console.log('call:' + args.join()); // "call:1,2", "call:4,5"
// }

//====================================================================================================================//
// –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

/**
 * –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä delay(f, ms), –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ f –Ω–∞ ms –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.
 */

// const f = x => console.log(x);
//
// const delay = (func, ms) => {
//     return function() {
//         console.log(arguments);
//         setTimeout(() => func.apply(this, arguments), ms);
//     };
// };
//
// // —Å–æ–∑–¥–∞—ë–º –æ–±—ë—Ä—Ç–∫–∏
// const f1000 = delay(f, 1000);
// const f1500 = delay(f, 1500);
//
// f1000("test", 214); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "test" –ø–æ—Å–ª–µ 1000 –º—Å
// f1500("test", 333); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "test" –ø–æ—Å–ª–µ 1500 –º—Å

//====================================================================================================================//
// –î–µ–∫–æ—Ä–∞—Ç–æ—Ä debounce

// const request = data => {
//     console.log("request:", data);
// };
//
// const debounce = (func, ms) => {
//     let timeoutId;
//
//     return function(...args) {
//         clearTimeout(timeoutId);
//
//         timeoutId = setTimeout(() => {
//             func.apply(this, args);
//         }, ms);
//     };
// };
//
// const debouncedRequest = debounce(request, 1000);
//
// debouncedRequest("a");
// setTimeout(() => debouncedRequest("b"), 200);
// setTimeout(() => debouncedRequest("c"), 500);
// –ß–µ—Ä–µ–∑ 1000 –º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ (–≤ 1500–º—Å) –≤—ã–≤–µ–¥–µ—Ç—Å—è:
// request: c

//====================================================================================================================//
// –¢–æ—Ä–º–æ–∑—è—â–∏–π (throttling) –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

// function f(a) {
//     console.log(a)
// }
//
// function throttle(func, ms) {
//
//     let isThrottled = false,
//         savedArgs,
//         savedThis;
//
//     return function wrapper() {
//
//         if (isThrottled) { // (2)
//             savedArgs = arguments;
//             savedThis = this;
//             return;
//         }
//
//         func.apply(this, arguments); // (1)
//
//         isThrottled = true;
//
//         setTimeout(function() {
//             isThrottled = false; // (3)
//             if (savedArgs) {
//                 wrapper.apply(savedThis, savedArgs);
//                 savedArgs = savedThis = null;
//             }
//         }, ms);
//     }
// }
//
// // f1000 –ø–µ—Ä–µ–¥–∞—ë—Ç –≤—ã–∑–æ–≤—ã f –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 1000 –º—Å
// const f1000 = throttle(f, 1000);
//
// f1000(1); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1
// f1000(2); // (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, 1000 –º—Å –µ—â—ë –Ω–µ—Ç)
// f1000(3); // (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, 1000 –º—Å –µ—â—ë –Ω–µ—Ç)

// –∫–æ–≥–¥–∞ 1000 –º—Å –∏—Å—Ç–µ–∫–ª–∏ ...
// ...–≤—ã–≤–æ–¥–∏–º 3, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 2 –±—ã–ª–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ
