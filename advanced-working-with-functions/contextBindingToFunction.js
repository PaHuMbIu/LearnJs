/**
 * –ú–µ—Ç–æ–¥ .bind() —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, —É –∫–æ—Ç–æ—Ä–æ–π –∂—ë—Å—Ç–∫–æ –ø—Ä–∏–≤—è–∑–∞–Ω this.
 */

function greet() {
  console.log(this.name);
}

const user = {name: "–ö–∞—Ç—è"};

const boundGreet = greet.bind(user);
boundGreet(); // => –ö–∞—Ç—è

/**
 * greet.bind(user) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≥–¥–µ this –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω user.
 */

// üîÅ –û—Ç–ª–∏—á–∏–µ –æ—Ç call –∏ apply
/**
 * call –∏ apply –≤—ã–∑—ã–≤–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–∑—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º this.
 * bind ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –ø–æ–∑–∂–µ.
 */

greet.call(user); // —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ—Ç
const fn = greet.bind(user); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
fn(); // –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–∑–∂–µ

// ‚úÖ bind –Ω—É–∂–µ–Ω, –∫–æ–≥–¥–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç this

const user1 = {
  name: "–ò—Ä–∞",
  sayHi() {
    console.log(this.name);
  }
};
setTimeout(user1.sayHi, 1000); // ‚ùå –æ—à–∏–±–∫–∞: this === undefined
const f = user1.sayHi;
f()

/**
 * üö´ –ü–æ—á–µ–º—É –æ—à–∏–±–∫–∞: –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –≤ –¥—Ä—É–≥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ä—è–µ—Ç—Å—è
 */

// –ü–æ—Ç–µ—Ä—è this –≤ –∫–æ–ª–±—ç–∫–∞—Ö
const user2 = {
  name: "–û–ª—è",
  sayHi() {
    console.log(`–ü—Ä–∏–≤–µ—Ç, ${this.name}`);
  }
};

function executeCallback(callback) {
  callback(); // –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
}

executeCallback(user2.sayHi); // ‚ùå this —Ç–µ—Ä—è–µ—Ç—Å—è
executeCallback(user2.sayHi.bind(user)) // => –ü—Ä–∏–≤–µ—Ç, –û–ª—è

// ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (Partial Application)
/**
 * .bind() –º–æ–∂–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å this, –Ω–æ –∏ —á–∞—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ.
 */

function multiply(a, b) {
  return a * b;
}

const double = multiply.bind(null, 2); // a = 2 —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–æ

console.log(double(5)); // => 10 (2 * 5)

/**
 * double ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å ¬´–∑–∞—à–∏—Ç—ã–º¬ª –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
 */

/**
 * ‚ö†Ô∏è this –≤ bind(null, ...)
 * –ï—Å–ª–∏ this –Ω–µ –Ω—É–∂–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ this), –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å null.
 */

// üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π bind
function customBind(func, context, ...boundArgs) {
  return function (...args) {
    console.log([...boundArgs, ...args])
    return func.apply(context, [...boundArgs, ...args]);
  };
}

function say(greeting, name) {
  console.log(`${greeting}, ${name}`);
}

const sayHelloTo = customBind(say, null, "–ü—Ä–∏–≤–µ—Ç");

sayHelloTo("–ú–∞—à–∞"); // => –ü—Ä–∏–≤–µ—Ç, –ú–∞—à–∞

// üß© –ò—Ç–æ–≥–æ:
/**
 * –ú–µ—Ç–æ–¥	        –ß—Ç–æ –¥–µ–ª–∞–µ—Ç	                          –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
 * call	            –í—ã–∑—ã–≤–∞–µ—Ç —Å this –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏	      –ö–æ–≥–¥–∞ –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ä–∞–∑—É
 * apply	        –¢–æ –∂–µ, –Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–º	      –ö–æ–≥–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É–∂–µ –≤ –º–∞—Å—Å–∏–≤–µ
 * bind	            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å this	          –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–∑–∂–µ, —Å —Ñ–∏–∫—Å. this
 */

// üí° –ì–¥–µ –ø–æ–ª–µ–∑–µ–Ω bind?
/**
 * –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π (addEventListener)
 * –í setTimeout/setInterval
 * –í –∫–æ–ª–±—ç–∫–∞—Ö (map, forEach, filter)
 * –î–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ
 */
//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, —Ç–µ—Ä—è—é—â—É—é "this"

/**
 * –í—ã–∑–æ–≤ askPassword() –≤ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–∏–∂–µ –∫–æ–¥–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ –∑–∞—Ç–µ–º –≤—ã–∑–≤–∞—Ç—å user.
 * loginOk/loginFail –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞.
 *
 * –û–¥–Ω–∞–∫–æ, –µ–≥–æ –≤—ã–∑–æ–≤ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–µ. –ü–æ—á–µ–º—É?
 */

// function askPassword(ok, fail) {
//     let password = prompt("Password?", '');
//     if (password === "rockstar") ok();
//     else fail();
// }
//
// const user = {
//     name: '–í–∞—Å—è',
//
//     loginOk() {
//         console.log(`${this.name} logged in`);
//     },
//
//     loginFail() {
//         console.log(`${this.name} failed to log in`);
//     },
//
// };
// askPassword(user.loginOk.bind(user), user.loginFail.bind(user));
//====================================================================================================================//
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞

/**
 * –û–±—ä–µ–∫—Ç user –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω.
 * –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö —Ñ—É–Ω–∫—Ü–∏–π loginOk/loginFail —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ ‚Äì user.login(true/false).
 *
 * –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ askPassword –≤ –∫–æ–¥–µ –Ω–∏–∂–µ,
 * —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é user.login(true) –∫–∞–∫ ok –∏ —Ñ—É–Ω–∫—Ü–∏—é user.login(false) –∫–∞–∫ fail?
 */

// function askPassword(ok, fail) {
//     const password = prompt("Password?", '');
//     if (password === "rockstar") ok();
//     else fail();
// }
//
// const user = {
//     name: 'John',
//
//     login(result) {
//         console.log( this.name + (result ? ' logged in' : ' failed to log in') );
//     }
// };
//
// askPassword(user.login.bind(user, true), user.login.bind(user, false)); // ?