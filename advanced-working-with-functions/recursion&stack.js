// 🔁 Что такое рекурсия?
/**
 * Рекурсия — это когда функция вызывает саму себя.
 * Представь, будто ты стоишь перед зеркалом,
 * а позади тебя ещё одно зеркало — ты видишь себя, потом себя в зеркале, потом ещё одного себя… Это и есть рекурсия.
 */

// 📦 Пример простой
function countdown(n) {
  if (n === 0) {
    console.log('Готово!');
  } else {
    console.log(n);
    countdown(n - 1);
  }
}

countdown(3);

// 🧠 Важные части рекурсии
/**
 * Базовый случай (условие выхода): это то, что останавливает рекурсию.
 * Иначе функция будет вызывать себя бесконечно, и произойдёт ошибка (переполнение стека).
 *
 * В примере выше это if (n === 0)
 *
 * Рекурсивный шаг: это когда функция вызывает саму себя с новым аргументом, приближаясь к базовому случаю.
 *
 * В примере это countdown(n - 1)
 */

// 🧮 Более серьёзный пример — факториал
function factorial(n) {
    if (n === 1) return 1;
    return n * factorial(n - 1);
}
console.log(factorial(5)); // 120

/**
 * factorial(5)
 * = 5 * factorial(4)
 * = 5 * 4 * factorial(3)
 * = 5 * 4 * 3 * factorial(2)
 * = 5 * 4 * 3 * 2 * factorial(1)
 * = 5 * 4 * 3 * 2 * 1 = 120
 */

//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// Вычислить сумму чисел до данного

/**
 * С использованием цикла.
 * Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
 */

// Цикл
// const sumTo = n => {
//     let result = 1;
//
//     for (let i = 1; i < n; n--) {
//         result += n;
//     }
//
//     return result;
// };

// Рекурсия
// const sumTo = n => n === 1 ? n : n + sumTo(n - 1);

// console.log(sumTo(1)); // 1
// console.log(sumTo(2)); // 3
// console.log(sumTo(3)); // 6
// console.log(sumTo(4)); // 10
// console.log(sumTo(100)); // 5050

//====================================================================================================================//
// Вычислить факториал

// const factorial = n => n === 1 ? n : n * factorial(n - 1);
// console.log(factorial(5)); // 120

//====================================================================================================================//
// Числа Фибоначчи

// const fib = n => {
//     let result = 1;
//
//     if (result === n) {
//         return result;
//     } else {
//
//     }
// };
// console.log(fib(3)); // 2
// console.log(fib(7)); // 13
// console.log(fib(77)); // 5527939700884757

//====================================================================================================================//
// Вывод односвязного списка

/**
 * Сделайте два варианта решения: используя цикл и через рекурсию.
 */

// const list = {
//     value: 1,
//     next: {
//         value: 2,
//         next: {
//             value: 3,
//             next: {
//                 value: 4,
//                 next: null
//             },
//         },
//     },
// };

// Рекурсия
// const printList = list => {
//     console.log(list.value);
//     if (list.next) printList(list.next);
// };
// console.log(printList(list)); // 1 2 3 4


// Цикл
// const printList = list => {
//     let tmp = list;
//
//     while (tmp) {
//         console.log(tmp.value);
//         tmp = tmp.next;
//     }
// };
// console.log(printList(list)); // 1 2 3 4

//====================================================================================================================//
// Вывод односвязного списка в обратном порядке

/**
 *  Сделайте два решения: с использованием цикла и через рекурсию.
 */

// const list = {
//     value: 1,
//     next: {
//         value: 2,
//         next: {
//             value: 3,
//             next: {
//                 value: 4,
//                 next: null
//             },
//         },
//     },
// };

// Рекурсия
// const printList = list => {
//     if (list.next) console.log(list.value);
//     if (list.next) printList(list.next);
// };
// console.log(printList(list)); // 4 3 2 1