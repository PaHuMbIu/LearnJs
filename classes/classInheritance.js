// üîó –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤?
/**
 * –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
 * –ù–æ–≤—ã–π –∫–ª–∞—Å—Å —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ, –¥–æ–±–∞–≤–ª—è—è —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã.
 */

class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} –∏–∑–¥–∞—ë—Ç –∑–≤—É–∫.`);
    }
}

class Dog extends Animal {
    bark() {
        console.log(`${this.name} –ª–∞–µ—Ç.`);
    }
}

const dog = new Dog("–®–∞—Ä–∏–∫");
dog.speak(); // –®–∞—Ä–∏–∫ –∏–∑–¥–∞—ë—Ç –∑–≤—É–∫.
dog.bark();  // –®–∞—Ä–∏–∫ –ª–∞–µ—Ç.

// üß† –ß—Ç–æ –¥–µ–ª–∞–µ—Ç super?
/**
 * super ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–ª–∞—Å—Å—É:
 */

class Animal1 {
    constructor(name) {
        this.name = name;
    }
}

class Rabbit extends Animal1 {
    constructor(name, color) {
        super(name); // –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π constructor
        this.color = color;
    }
}

class A {
    constructor() {
        this.sayHi = function() {
            console.log('–ü—Ä–∏–≤–µ—Ç –æ—Ç A');
        };
    }
}



const rabbit = new Rabbit("–ö—Ä–æ–ª–∏–∫", "–±–µ–ª—ã–π");
console.log(rabbit.name);  // –ö—Ä–æ–ª–∏–∫
console.log(rabbit.color); // –±–µ–ª—ã–π

/**
 * –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å super(...), –µ—Å–ª–∏ –∫–ª–∞—Å—Å —Ä–∞—Å—à–∏—Ä—è–µ—Ç –¥—Ä—É–≥–æ–π.
 * –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å this, –ø–æ–∫–∞ –Ω–µ –≤—ã–∑–≤–∞–Ω super(...).
 */

class Animal2 {
    constructor(name) {
        this.name = name;
    };

    speak() {
        console.log(`${this.name} –º–æ–ª—á–∏—Ç...`);
    }
}

class Cat extends Animal2 {
    speak() {
        super.speak(); // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        console.log(`${this.name} –º—è—É–∫–∞–µ—Ç.`);
        // –ü–æ–≤–µ–¥–µ–Ω–∏–µ, —Å–ª–æ–≤–Ω–æ –≤ –∑–¥–µ—Å—å 2 console.log, –º–æ–ª—á–∏—Ç –∏ –º—è—É–∫–∞–µ—Ç
    }
}

const cat = new Cat("–ú—É—Ä–∫–∞");
cat.speak();
// –ú—É—Ä–∫–∞ –º–æ–ª—á–∏—Ç...
// –ú—É—Ä–∫–∞ –º—è—É–∫–∞–µ—Ç.

/**
 * super.method() –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è, –∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—Ç—å.
 */

// ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ new:
/**
 *  new Child(...) ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç constructor —Ä–æ–¥–∏—Ç–µ–ª—è ‚Üí –ø–æ—Ç–æ–º constructor –ø–æ—Ç–æ–º–∫–∞
 */

class A {
    method() {
        console.log("A");
    }
}

class B extends A {
    method() {
        super.method(); // –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –∏–∑ A
        console.log("B");
    }
}

new B().method();
// A
// B

//====================================================================================================================//
/**
 * Tasks
 */
//--------------------------------------------------------------------------------------------------------------------//
// –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞

// class Animal {
//
//     constructor(name) {
//         this.name = name;
//     }
//
// }
//
// class Rabbit extends Animal {
//     constructor(name) {
//         super(name)
//         this.created = Date.now();
//     }
// }
//
// let rabbit = new Rabbit("–ë–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫"); // Error: this is not defined
// console.log(rabbit.name);

//====================================================================================================================//
// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —á–∞—Å—ã

/**
 * –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å ExtendedClock,
 * –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç Clock –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä precision ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É ¬´—Ç–∏–∫–∞–º–∏¬ª.
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ 1000 (1 —Å–µ–∫—É–Ω–¥–∞) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 */

// class Clock {
//     constructor({ template }) {
//         this.template = template;
//     }
//
//     render() {
//         let date = new Date();
//
//         let hours = date.getHours();
//         if (hours < 10) hours = '0' + hours;
//
//         let mins = date.getMinutes();
//         if (mins < 10) mins = '0' + mins;
//
//         let secs = date.getSeconds();
//         if (secs < 10) secs = '0' + secs;
//
//         let output = this.template
//             .replace('h', hours)
//             .replace('m', mins)
//             .replace('s', secs);
//
//         console.log(output);
//     }
//
//     stop() {
//         clearInterval(this.timer);
//     }
//
//     start() {
//         this.render();
//         this.timer = setInterval(() => this.render(), 1000);
//     }
// }
//
// class ExtendedClock extends Clock {
//
//     constructor(options) {
//         super(options);
//         let { precision = 1000 } = options;
//         this.precision = precision;
//     }
//
//     start() {
//         this.render();
//         this.timer = setInterval(() => this.render(), this.precision);
//     }
//
// }
//
// const clock = new ExtendedClock({ template: 'h:m:s', precision: 1000 });
// console.log(clock)
// clock.start();
